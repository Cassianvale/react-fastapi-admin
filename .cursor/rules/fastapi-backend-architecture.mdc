---
alwaysApply: true
description: FastAPI后端架构和开发规范
---

# FastAPI 后端架构规范

这是一个基于 FastAPI + Tortoise ORM + Vue3 的现代全栈管理系统，采用前后端分离架构。

## 🏗️ 核心架构模式

### 分层架构设计

```
请求流程：Client → API Router → Controller → Service/CRUD → Model → Database
响应流程：Database → Model → CRUD/Service → Controller → API Router → Client
```

### 目录结构说明

#### `/app` - 后端应用主目录

- **入口文件**: [app/**init**.py](mdc:app/__init__.py) - FastAPI 应用实例创建和生命周期管理
- **启动文件**: [main.py](mdc:main.py) - 使用 Granian ASGI 服务器启动应用

#### `/app/api/v1` - API 路由层

- 按功能模块组织 API 路由（users, roles, menus, apis, depts 等）
- 每个模块包含 CRUD 操作的路由定义
- 统一的路由注册机制

#### `/app/controllers` - 控制器层

- 业务逻辑处理层，连接 API 路由和数据操作
- 文件映射：
  - [app/controllers/user.py](mdc:app/controllers/user.py) - 用户管理控制器
  - [app/controllers/role.py](mdc:app/controllers/role.py) - 角色管理控制器
  - [app/controllers/menu.py](mdc:app/controllers/menu.py) - 菜单管理控制器
  - [app/controllers/api.py](mdc:app/controllers/api.py) - API 管理控制器

#### `/app/models` - 数据模型层

- 基于 Tortoise ORM 的数据模型定义
- [app/models/admin.py](mdc:app/models/admin.py) - 核心管理模型：User, Role, Menu, Api, Dept
- [app/models/base.py](mdc:app/models/base.py) - 基础模型类和混入
- [app/models/enums.py](mdc:app/models/enums.py) - 枚举类型定义

#### `/app/schemas` - 数据验证层

- 基于 Pydantic 的数据验证和序列化模式
- 每个模块对应的请求/响应模式定义
- 与控制器和 API 路由配合使用

#### `/app/core` - 核心功能模块

- [app/core/crud.py](mdc:app/core/crud.py) - 通用 CRUD 基类，提供标准数据操作
- [app/core/dependency.py](mdc:app/core/dependency.py) - 依赖注入，包括身份验证和权限控制
- [app/core/exceptions.py](mdc:app/core/exceptions.py) - 自定义异常处理
- [app/core/middlewares.py](mdc:app/core/middlewares.py) - 中间件定义（CORS、审计日志等）
- [app/core/init_app.py](mdc:app/core/init_app.py) - 应用初始化逻辑

#### `/app/settings` - 配置管理

- [app/settings/config.py](mdc:app/settings/config.py) - 基于 Pydantic 的配置管理
- 环境变量支持，支持开发/生产环境切换

#### `/app/utils` - 工具函数

- [app/utils/jwt_utils.py](mdc:app/utils/jwt_utils.py) - JWT 令牌处理
- [app/utils/password.py](mdc:app/utils/password.py) - 密码加密/验证
- [app/utils/log_control.py](mdc:app/utils/log_control.py) - 日志系统控制

## 🔐 权限系统架构

### RBAC 模型实现

- **用户（User）**: 系统使用者，可分配多个角色
- **角色（Role）**: 权限集合，可分配给用户
- **菜单（Menu）**: 前端菜单权限控制
- **API（Api）**: 后端接口权限控制
- **部门（Dept）**: 组织架构管理

### 权限验证流程

```
请求 → JWT验证 → 用户身份确认 → 角色权限检查 → API权限验证 → 业务逻辑处理
```

## 📊 开发模式和最佳实践

### 1. CRUD 操作标准化

- 继承 `CRUDBase` 基类实现标准 CRUD 操作
- 统一的分页、排序、筛选机制
- 标准化的异常处理和错误响应

### 2. 数据验证流程

```
输入数据 → Pydantic Schema 验证 → 控制器业务逻辑 → ORM 模型操作 → 数据库
```

### 3. 异常处理机制

- 自定义异常类型：`RecordNotFoundError`, `InvalidParameterError` 等
- 统一的异常处理器，返回标准化错误响应
- 详细的错误日志记录

### 4. 日志系统

- 分层日志记录：访问日志、错误日志、业务日志
- 结构化日志格式，支持日志轮转和清理
- 可配置的日志级别和输出格式

### 5. 中间件架构

- **CORS 中间件**: 跨域请求处理
- **访问日志中间件**: 请求响应记录
- **审计日志中间件**: 操作审计追踪
- **后台任务中间件**: 异步任务处理

## 🚀 开发指南

### 添加新功能模块的步骤：

1. **创建数据模型** - 在 `/app/models/` 中定义 Tortoise ORM 模型
2. **定义数据模式** - 在 `/app/schemas/` 中创建 Pydantic 验证模式
3. **实现控制器** - 在 `/app/controllers/` 中编写业务逻辑
4. **创建 API 路由** - 在 `/app/api/v1/` 中定义路由端点
5. **更新路由注册** - 在 `init_app.py` 中注册新路由
6. **数据库迁移** - 使用 Aerich 生成和应用数据库迁移

### 代码组织原则：

- 单一职责：每个模块专注特定功能
- 依赖注入：通过 FastAPI 的依赖系统管理组件
- 配置外化：所有配置通过环境变量或配置文件管理
- 异步优先：充分利用 Python asyncio 和 FastAPI 的异步特性

### 测试策略：

- 单元测试：测试独立的业务逻辑函数
- 集成测试：测试 API 端点和数据库交互
- 端到端测试：完整的用户场景测试

## ⚡ 性能优化要点

1. **数据库优化**：合理使用索引、避免 N+1 查询
2. **异步处理**：I/O 密集型操作使用异步方法
3. **缓存策略**：合理使用内存缓存和 Redis
4. **分页处理**：大数据集必须分页返回
5. **连接池管理**：数据库连接池优化配置
