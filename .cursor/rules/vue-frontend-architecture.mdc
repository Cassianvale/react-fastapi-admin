description:
globs:
alwaysApply: false

---

# Vue3 前端架构规范

这是基于 Vue3 + Naive UI + Pinia 的现代前端管理系统架构规范。

## 🏗️ 前端架构设计

### 技术栈

- **框架**: Vue 3 (Composition API)
- **UI 库**: Naive UI
- **状态管理**: Pinia
- **路由**: Vue Router 4
- **构建工具**: Vite
- **样式**: SCSS + UnoCSS
- **国际化**: Vue I18n

### 目录结构说明

#### `/web/src` - 前端源码目录

- **入口文件**: [web/src/main.js](mdc:web/src/main.js) - 应用启动入口
- **根组件**: [web/src/App.vue](mdc:web/src/App.vue) - 应用根组件

#### `/web/src/api` - API 接口层

- 统一的 API 请求封装
- 接口定义和调用管理

#### `/web/src/components` - 组件层

- **通用组件**: [web/src/components/common/](mdc:web/src/components/common/) - 跨页面复用组件
- **图标组件**: [web/src/components/icon/](mdc:web/src/components/icon/) - 图标相关组件
- **页面组件**: [web/src/components/page/](mdc:web/src/components/page/) - 页面级组件
- **查询组件**: [web/src/components/query-bar/](mdc:web/src/components/query-bar/) - 查询栏组件
- **表格组件**: [web/src/components/table/](mdc:web/src/components/table/) - 表格相关组件

#### `/web/src/layout` - 布局组件

- [web/src/layout/index.vue](mdc:web/src/layout/index.vue) - 主布局容器
- **头部组件**: [web/src/layout/components/header/](mdc:web/src/layout/components/header/) - 顶部导航栏
- **侧边栏**: [web/src/layout/components/sidebar/](mdc:web/src/layout/components/sidebar/) - 侧边菜单
- **标签栏**: [web/src/layout/components/tags/](mdc:web/src/layout/components/tags/) - 页面标签导航

#### `/web/src/router` - 路由管理

- [web/src/router/index.js](mdc:web/src/router/index.js) - 路由配置
- **路由守卫**: [web/src/router/guard/](mdc:web/src/router/guard/) - 导航守卫逻辑
- **路由定义**: [web/src/router/routes/](mdc:web/src/router/routes/) - 路由表定义

#### `/web/src/store` - 状态管理 (Pinia)

- [web/src/store/index.js](mdc:web/src/store/index.js) - Store 配置
- **用户模块**: [web/src/store/modules/user/](mdc:web/src/store/modules/user/) - 用户状态管理
- **应用模块**: [web/src/store/modules/app/](mdc:web/src/store/modules/app/) - 应用设置状态
- **权限模块**: [web/src/store/modules/permission/](mdc:web/src/store/modules/permission/) - 权限路由管理
- **标签模块**: [web/src/store/modules/tags/](mdc:web/src/store/modules/tags/) - 页面标签状态

#### `/web/src/views` - 页面视图

- **工作台**: [web/src/views/workbench/](mdc:web/src/views/workbench/) - 仪表板页面
- **登录页**: [web/src/views/login/](mdc:web/src/views/login/) - 登录认证页面
- **系统管理**: [web/src/views/system/](mdc:web/src/views/system/) - 系统管理页面集合
- **错误页面**: [web/src/views/error-page/](mdc:web/src/views/error-page/) - 错误页面集合

## 🎨 组件开发规范

### Vue 3 Composition API 规范

```vue
<script setup>
import { ref, reactive, computed, onMounted } from "vue";
import { useRouter } from "vue-router";
import { useMessage } from "naive-ui";

// Props 定义
const props = defineProps({
  title: {
    type: String,
    default: "",
  },
  data: {
    type: Array,
    default: () => [],
  },
});

// Emits 定义
const emit = defineEmits(["update", "delete"]);

// 响应式数据
const loading = ref(false);
const formData = reactive({
  name: "",
  email: "",
});

// 计算属性
const totalCount = computed(() => props.data.length);

// 方法定义
const handleSubmit = async () => {
  loading.value = true;
  try {
    // 业务逻辑
    emit("update", formData);
  } finally {
    loading.value = false;
  }
};

// 生命周期
onMounted(() => {
  // 初始化逻辑
});
</script>

<template>
  <div class="container">
    <!-- 模板内容 -->
  </div>
</template>

<style scoped lang="scss">
.container {
  // 样式定义
}
</style>
```

### 组件命名规范

- **组件文件**: 使用 `PascalCase` (如: `UserList.vue`)
- **组件名称**: 使用 `PascalCase` (如: `<UserList />`)
- **Props**: 使用 `camelCase`
- **Events**: 使用 `kebab-case`

## 🔄 状态管理 (Pinia) 规范

### Store 定义模式

```javascript
import { defineStore } from "pinia";
import { ref, computed } from "vue";

export const useUserStore = defineStore("user", () => {
  // State
  const userInfo = ref(null);
  const token = ref("");

  // Getters (Computed)
  const isLoggedIn = computed(() => !!token.value);
  const userName = computed(() => userInfo.value?.username || "");

  // Actions
  const login = async (credentials) => {
    try {
      // 登录逻辑
      const response = await loginApi(credentials);
      token.value = response.token;
      userInfo.value = response.user;
    } catch (error) {
      throw error;
    }
  };

  const logout = () => {
    token.value = "";
    userInfo.value = null;
  };

  return {
    // State
    userInfo,
    token,
    // Getters
    isLoggedIn,
    userName,
    // Actions
    login,
    logout,
  };
});
```

### Store 使用规范

```vue
<script setup>
import { useUserStore } from "@/store/modules/user";

const userStore = useUserStore();

// 访问状态
const { userInfo, isLoggedIn } = storeToRefs(userStore);

// 调用方法
const handleLogin = async () => {
  await userStore.login(credentials);
};
</script>
```

## 🛠️ 工具函数和 Composables

### Composables 规范

```javascript
// composables/useCRUD.js
import { ref, reactive } from "vue";
import { useMessage } from "naive-ui";

export function useCRUD(api) {
  const loading = ref(false);
  const data = ref([]);
  const pagination = reactive({
    page: 1,
    pageSize: 10,
    total: 0,
  });

  const message = useMessage();

  const fetchData = async () => {
    loading.value = true;
    try {
      const response = await api.list(pagination);
      data.value = response.data;
      pagination.total = response.total;
    } catch (error) {
      message.error("获取数据失败");
    } finally {
      loading.value = false;
    }
  };

  const create = async (formData) => {
    try {
      await api.create(formData);
      message.success("创建成功");
      fetchData();
    } catch (error) {
      message.error("创建失败");
    }
  };

  return {
    loading,
    data,
    pagination,
    fetchData,
    create,
  };
}
```

## 🎯 路由和权限管理

### 路由定义规范

```javascript
// router/routes/system.js
export default [
  {
    path: "/system",
    name: "System",
    component: () => import("@/layout/index.vue"),
    meta: {
      title: "系统管理",
      icon: "system",
      requiresAuth: true,
    },
    children: [
      {
        path: "user",
        name: "SystemUser",
        component: () => import("@/views/system/user/index.vue"),
        meta: {
          title: "用户管理",
          permissions: ["system:user:view"],
        },
      },
    ],
  },
];
```

### 权限检查

```javascript
// router/guard/auth-guard.js
import { useUserStore } from "@/store/modules/user";

export function setupAuthGuard(router) {
  router.beforeEach((to, from, next) => {
    const userStore = useUserStore();

    if (to.meta.requiresAuth && !userStore.isLoggedIn) {
      next("/login");
      return;
    }

    if (to.meta.permissions) {
      const hasPermission = userStore.hasPermissions(to.meta.permissions);
      if (!hasPermission) {
        next("/403");
        return;
      }
    }

    next();
  });
}
```

## 🎨 样式和主题规范

### SCSS 组织

```scss
// styles/global.scss
@import "./variables.scss";
@import "./mixins.scss";
@import "./reset.css";

// 全局样式
body {
  font-family: $font-family-base;
  color: $text-color-primary;
}

// 工具类
.text-center {
  text-align: center;
}
.flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
```

### UnoCSS 使用

```vue
<template>
  <div class="p-4 bg-white rounded-lg shadow-md">
    <h1 class="text-xl font-bold mb-4">标题</h1>
    <div class="flex items-center justify-between">
      <!-- 内容 -->
    </div>
  </div>
</template>
```

## 📱 响应式设计

### 断点规范

- **xs**: < 480px (手机)
- **sm**: 480px - 768px (大手机/小平板)
- **md**: 768px - 1024px (平板)
- **lg**: 1024px - 1280px (小桌面)
- **xl**: > 1280px (大桌面)

### 响应式组件

```vue
<template>
  <div class="responsive-container">
    <div class="hidden md:block">桌面版内容</div>
    <div class="block md:hidden">移动版内容</div>
  </div>
</template>
```

## 🔍 最佳实践

### 性能优化

- 使用 `v-show` vs `v-if` 的场景选择
- 组件懒加载和代码分割
- 虚拟滚动处理大列表
- 图片懒加载和压缩

### 代码质量

- 使用 TypeScript 提供类型安全
- ESLint + Prettier 代码格式化
- 组件单元测试覆盖
- 接口 Mock 和数据模拟

### 国际化

```javascript
// i18n/messages/cn.json
{
  "common": {
    "save": "保存",
    "cancel": "取消",
    "confirm": "确认"
  },
  "user": {
    "username": "用户名",
    "email": "邮箱地址"
  }
}

// 在组件中使用
const { t } = useI18n()
const saveText = t('common.save')
```
